---
interface Props {
  title: string;
  author: Array<string>;
  me: string;
  publishedDate: number;
  confName: string;
  category: Array<string>;
  postscript: Array<string>;
  international: boolean;
  paperUrl: string;
  codeUrl: string;
}
const {
  title,
  author,
  me,
  publishedDate,
  confName,
  category,
  postscript,
  international,
  paperUrl,
  codeUrl,
} = Astro.props;

const year = Math.floor(publishedDate / 100);
const month = publishedDate - year * 100;
const date = new Date(year, month - 1);
// const formattedDate = new Intl.DateTimeFormat("en-US", {
//   year: "numeric",
//   month: "short",
// }).format(date);

const highlightMe = (author_=author, me = "Taehoon Kim") => {
  let highlightAuthor = Object();
  for (let i = 0; i < author_?.length; i++) {
    const authorElement = author[i];
    if (authorElement === me) highlightAuthor[authorElement] = true;
    else highlightAuthor[authorElement] = false;
  }

  let innerHTML = "";
  for (let key in highlightAuthor) {
    if (true === highlightAuthor[key]) innerHTML += `<strong>${key}</strong> `;
    else innerHTML += `${key} `;
  }

  return innerHTML;
};

const categoryExist = !!category?.length;
const postscriptExist = !!postscript?.length;
---

<li class="flex flex-row flex-wrap gap-1">
  <div class="text-xl font-extrabold">{title}</div>
</li>
{/*https://docs.astro.build/en/basics/astro-syntax/#fragments*/}
<li class="test-sm text-gray-500">
  {(<Fragment set:html={highlightMe(author, me)} />)}
</li>
<li class="flex flex-row gap-2 flex-wrap pt-2">
  <div class="font-extrabold">{confName}</div>
  <div>{date}</div>
  <!-- Draw When p.s. exist -->
  <div class="flex max-sm:flex-wrap gap-1">
    {
      postscriptExist &&
        postscript.map(data => (
          <div
            class:list={["badge badge-primary", !postscriptExist && "hidden"]}
          >
            {data}
          </div>
        ))
    }
  </div>
  <div class="flex max-sm:flex-wrap gap-1">
    {
      categoryExist &&
        category.map(data => (
          <div class:list={["badge", !categoryExist && "hidden"]}>{data}</div>
        ))
    }
  </div>
  <div class="flex max-sm:flex-wrap gap-1">
    <a
      href={codeUrl}
      class=`badge badge-outline ${codeUrl?.length === 0 && "hidden"}`>Code</a
    >
    <a
      href={paperUrl}
      class=`badge badge-outline ${paperUrl?.length === 0 && "hidden"}`>Paper</a
    >
  </div>
</li>
